import re

def is_html_wrapped(text):
    return bool(re.search(r'<[^>]+>', text))

def is_markdown_link(text):
    return bool(re.match(r'\[.+?\]\(.+?\)', text))

def get_format(md_str):
    if re.fullmatch(r"\*\*\*.+\*\*\*", md_str):
        return 'bold_italic'
    elif re.fullmatch(r"\*\*_.+_\*\*", md_str):
        return 'bold_italic_alt'
    elif re.fullmatch(r"\*\*.+\*\*", md_str):
        return 'bold'
    elif re.fullmatch(r"_+.+_+", md_str):
        return 'italic'
    else:
        return 'plain'

def strip_format(md_str):
    return re.sub(r'^(\*\*\*|\*\*_|_\*\*|\*\*|_)|(\*\*\*|\*\*_|_\*\*|\*\*|_)$', '', md_str)

def wrap_format(content, fmt):
    if fmt == 'bold':
        return f'**{content}**'
    elif fmt == 'italic':
        return f'_{content}_'
    elif fmt == 'bold_italic':
        return f'***{content}***'
    elif fmt == 'bold_italic_alt':
        return f'**_{content}_**'
    else:
        return content

def safe_join_markdown(md_list):
    result = []
    buffer = []
    current_fmt = None
    i = 0
    n = len(md_list)

    def flush_buffer():
        nonlocal buffer, current_fmt
        if buffer:
            joined = ''.join(buffer)
            if current_fmt and current_fmt != 'plain':
                result.append(wrap_format(joined, current_fmt))
            else:
                result.append(joined)
            buffer.clear()

    while i < n:
        md = md_list[i]

        # Step 1: 判断是否是组合成 【Q】或【A】
        if (
            i + 2 < n
            and strip_format(md_list[i]) == '【'
            and strip_format(md_list[i + 1]) in ('Q', 'A')
            and strip_format(md_list[i + 2]) == '】'
        ):
            flush_buffer()
            result.append(f'【{strip_format(md_list[i + 1])}】')
            i += 3
            continue

        # Step 2: 特殊格式块直接保留
        if is_html_wrapped(md) or is_markdown_link(md):
            flush_buffer()
            result.append(md)
            current_fmt = None
            i += 1
            continue

        # Step 3: 普通 markdown 合并逻辑
        fmt = get_format(md)
        content = strip_format(md)

        if fmt == current_fmt:
            buffer.append(content)
        else:
            flush_buffer()
            if result and current_fmt and fmt and (fmt.startswith(current_fmt) or current_fmt.startswith(fmt)):
                result.append(' ')
            buffer.append(content)
            current_fmt = fmt

        i += 1

    flush_buffer()
    return ''.join(result)
