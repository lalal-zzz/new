import re

def is_html_wrapped(text):
    return bool(re.search(r'<[^>]+>', text))

def is_markdown_link(text):
    return bool(re.match(r'\[.+?\]\(.+?\)', text))

def get_format(md_str):
    if re.fullmatch(r"\*\*\*.+\*\*\*", md_str):
        return 'bold_italic'
    elif re.fullmatch(r"\*\*_.+_\*\*", md_str):
        return 'bold_italic_alt'
    elif re.fullmatch(r"\*\*.+\*\*", md_str):
        return 'bold'
    elif re.fullmatch(r"_+.+_+", md_str):
        return 'italic'
    else:
        return 'plain'

def strip_format(md_str):
    return re.sub(r'^(\*\*\*|\*\*_|_\*\*|\*\*|_)|(\*\*\*|\*\*_|_\*\*|\*\*|_)$', '', md_str)

def wrap_format(content, fmt):
    if fmt == 'bold':
        return f'**{content}**'
    elif fmt == 'italic':
        return f'_{content}_'
    elif fmt == 'bold_italic':
        return f'***{content}***'
    elif fmt == 'bold_italic_alt':
        return f'**_{content}_**'
    else:
        return content

def safe_join_markdown(md_list):
    result = []
    buffer = []
    current_fmt = None

    def flush_buffer():
        nonlocal buffer, current_fmt
        if buffer:
            joined = ''.join(buffer)  # 不加空格合并
            if current_fmt and current_fmt != 'plain':
                result.append(wrap_format(joined, current_fmt))
            else:
                result.append(joined)
            buffer.clear()

    for md in md_list:
        # HTML 或 Markdown 链接直接保留
        if is_html_wrapped(md) or is_markdown_link(md):
            flush_buffer()
            result.append(md)
            current_fmt = None
            continue

        content = strip_format(md)

        # 👇 特别处理：【Q】 / 【A】转为普通文本
        if content in ('【Q】', '【A】'):
            flush_buffer()
            result.append(content)
            current_fmt = None
            continue

        fmt = get_format(md)

        if fmt == current_fmt:
            buffer.append(content)
        else:
            flush_buffer()
            if result and current_fmt and fmt and (fmt.startswith(current_fmt) or current_fmt.startswith(fmt)):
                result.append(' ')
            buffer.append(content)
            current_fmt = fmt

    flush_buffer()
    return ''.join(result)
